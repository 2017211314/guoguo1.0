/*
 * This file is generated by jOOQ.
*/
package com.guoguo.domain.jooq.tables.daos;


import com.guoguo.domain.jooq.tables.TRole;
import com.guoguo.domain.jooq.tables.pojos.TRoleObj;
import com.guoguo.domain.jooq.tables.records.TRoleRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * 角色表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class TRoleDao extends DAOImpl<TRoleRecord, TRoleObj, Integer> {

    /**
     * Create a new TRoleDao without any configuration
     */
    public TRoleDao() {
        super(TRole.T_ROLE, TRoleObj.class);
    }

    /**
     * Create a new TRoleDao with an attached configuration
     */
    @Autowired
    public TRoleDao(Configuration configuration) {
        super(TRole.T_ROLE, TRoleObj.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(TRoleObj object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<TRoleObj> fetchById(Integer... values) {
        return fetch(TRole.T_ROLE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public TRoleObj fetchOneById(Integer value) {
        return fetchOne(TRole.T_ROLE.ID, value);
    }

    /**
     * Fetch records that have <code>role_name IN (values)</code>
     */
    public List<TRoleObj> fetchByRoleName(String... values) {
        return fetch(TRole.T_ROLE.ROLE_NAME, values);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<TRoleObj> fetchByDescription(String... values) {
        return fetch(TRole.T_ROLE.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>available IN (values)</code>
     */
    public List<TRoleObj> fetchByAvailable(String... values) {
        return fetch(TRole.T_ROLE.AVAILABLE, values);
    }
}

/*
 * This file is generated by jOOQ.
*/
package com.guoguo.domain.jooq.tables.daos;


import com.guoguo.domain.jooq.tables.TRolePermission;
import com.guoguo.domain.jooq.tables.pojos.TRolePermissionObj;
import com.guoguo.domain.jooq.tables.records.TRolePermissionRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * 角色权限表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class TRolePermissionDao extends DAOImpl<TRolePermissionRecord, TRolePermissionObj, Integer> {

    /**
     * Create a new TRolePermissionDao without any configuration
     */
    public TRolePermissionDao() {
        super(TRolePermission.T_ROLE_PERMISSION, TRolePermissionObj.class);
    }

    /**
     * Create a new TRolePermissionDao with an attached configuration
     */
    @Autowired
    public TRolePermissionDao(Configuration configuration) {
        super(TRolePermission.T_ROLE_PERMISSION, TRolePermissionObj.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(TRolePermissionObj object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<TRolePermissionObj> fetchById(Integer... values) {
        return fetch(TRolePermission.T_ROLE_PERMISSION.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public TRolePermissionObj fetchOneById(Integer value) {
        return fetchOne(TRolePermission.T_ROLE_PERMISSION.ID, value);
    }

    /**
     * Fetch records that have <code>permission_id IN (values)</code>
     */
    public List<TRolePermissionObj> fetchByPermissionId(Integer... values) {
        return fetch(TRolePermission.T_ROLE_PERMISSION.PERMISSION_ID, values);
    }

    /**
     * Fetch records that have <code>role_id IN (values)</code>
     */
    public List<TRolePermissionObj> fetchByRoleId(Integer... values) {
        return fetch(TRolePermission.T_ROLE_PERMISSION.ROLE_ID, values);
    }
}
